// Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå ÏÇ¨Ïö©ÌïòÎäî ÎîîÎ≤ÑÍπÖ Ïú†Ìã∏Î¶¨Ìã∞
export const debugAuthConfig = () => {
  if (import.meta.env.DEV) {
    console.group('üîç Auth Configuration Debug');
    
    console.log('Environment Variables:');
    console.log('VITE_SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL);
    console.log('VITE_SUPABASE_ANON_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? '‚úÖ Set' : '‚ùå Missing');
    console.log('VITE_GOOGLE_CLIENT_ID:', import.meta.env.VITE_GOOGLE_CLIENT_ID ? '‚úÖ Set' : '‚ùå Missing');
    
    console.log('\nRequired Format Check:');
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
    if (supabaseUrl) {
      console.log('Supabase URL format:', supabaseUrl.includes('.supabase.co') ? '‚úÖ Correct' : '‚ùå Invalid format');
    }
    
    console.log('\nGoogle OAuth Callback URL should be:');
    if (supabaseUrl) {
      console.log(`${supabaseUrl}/auth/v1/callback`);
    }
    
    console.groupEnd();
  }
};

// Supabase ÌîÑÎ°úÎ∞îÏù¥Îçî ÏÉÅÌÉú ÌôïÏù∏
export const testGoogleProvider = async () => {
  if (import.meta.env.DEV) {
    const { supabase } = await import('@/shared/api/supabase');
    
    console.group('üîç Google Provider Test');
    
    try {
      // OAuth ÌÖåÏä§Ìä∏ (Ïã§Ï†ú Î¶¨Îã§Ïù¥Î†âÌä∏ ÌïòÏßÄ ÏïäÍ≥† ÏùëÎãµÎßå ÌôïÏù∏)
      const response = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          skipBrowserRedirect: true
        }
      });
      
      console.log('Google OAuth test response:', response);
      
      if (response.error) {
        console.error('‚ùå Google Provider Error:', response.error.message);
        
        if (response.error.message.includes('provider is not enabled')) {
          console.log('\nüö® Solution: Enable Google provider in Supabase Dashboard');
          console.log('1. Go to Authentication > Providers');
          console.log('2. Enable "Google" provider');
          console.log('3. Add your Google Client ID and Secret');
          console.log('4. Save settings');
        }
      } else {
        console.log('‚úÖ Google Provider is properly configured');
      }
    } catch (error) {
      console.error('‚ùå Test failed:', error);
    }
    
    console.groupEnd();
  }
};
