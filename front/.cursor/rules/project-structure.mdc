---
description: 프로젝트 구조, 폴더 네이밍 및 설정
alwaysApply: false
---
# Project Structure Rules

## 필수 체크리스트

1. **스키마 확인**: `front/src/shared/types/database.ts` 먼저 확인
2. **절대 경로**: `@/` 접두사 사용 필수
3. **Atomic Design**: atoms → molecules → organisms → templates 순서
4. **환경변수 검증**: 모든 `VITE_*` 변수 존재 확인

## 강제 패턴

### 스키마 참조
```typescript
// ✅ 개발 시작 전 필수
import type { Tables, TablesInsert, TablesUpdate } from '@/shared/types/database';
type TodoItem = Tables<'tb_todolist'>;
```

### 폴더 구조
```
src/
├── app/                    # 앱 설정 (providers, routers, store, styles)
├── components/             # Atomic Design
│   ├── atoms/             # 기본 컴포넌트
│   ├── molecules/         # 조합 컴포넌트
│   ├── organisms/         # 복합 컴포넌트
│   └── templates/         # 레이아웃
├── domains/               # 비즈니스 로직
│   ├── auth/hooks/
│   └── supabaseCommon/hooks/
├── pages/                 # 페이지 컴포넌트
└── shared/               # 공통 유틸
    ├── api/
    ├── types/
    │   └── database.ts   # 🔥 Supabase 자동생성 스키마
    └── util/
```

### 네이밍 규칙
```typescript
// 컴포넌트
ComponentName.tsx
ComponentName.module.scss
index.ts

// 훅
useHookName.ts

// 페이지
PageName.tsx (HomePage.tsx, LoginPage.tsx)

// 폴더
PascalCase (컴포넌트)
camelCase (도메인, 훅)
```

### 절대 경로 Import
```typescript
// ✅ 필수
import { Button } from '@/atoms/Button';
import { useAuth } from '@/domains/auth/hooks/useAuth';
import { supabase } from '@/shared/api/supabase';

// ❌ 금지
import { Button } from '../../../components/atoms/Button';
```

### 컴포넌트 구조
```
ComponentName/
├── ComponentName.tsx
├── ComponentName.module.scss
└── index.ts
```

## TypeScript 설정

### Path Aliases (필수)
```json
"paths": {
  "@/*": ["./src/*"],
  "@/atoms": ["src/components/atoms"],
  "@/molecules": ["src/components/molecules"],
  "@/organisms": ["src/components/organisms"],
  "@/templates": ["src/components/templates"],
  "@/pages": ["./src/pages"],
  "@/app": ["./src/app"]
}
```

### Vite Alias
```typescript
resolve: {
  alias: {
    '@': path.resolve(__dirname, './src'),
    '@/atoms': path.resolve(__dirname, './src/components/atoms'),
    '@/molecules': path.resolve(__dirname, './src/components/molecules'),
  },
}
```

## 환경변수

### 필수 환경변수
```bash
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
VITE_SUPABASE_PROJECT_ID=your_project_id
VITE_APP_URL=http://localhost:5173
```

### 환경변수 검증
```typescript
if (!import.meta.env.VITE_SUPABASE_URL) {
  throw new Error('Missing VITE_SUPABASE_URL');
}
```

## NPM 스크립트

### 핵심 스크립트
```json
{
  "dev": "vite",
  "build": "tsc -b && vite build",
  "supabase:types": "supabase gen types typescript > src/shared/types/database.ts"
}
```

## 금지사항

- 상대 경로 import (`../../../`)
- `database.ts` 수동 편집
- 컴포넌트에 직접 스타일 작성
- Atomic Design 순서 위반 (organism에서 template import 등)
- 환경변수 검증 생략

## 파일 생성 체크리스트

### 컴포넌트 생성
1. `src/components/{level}/ComponentName/` 폴더 생성
2. `ComponentName.tsx` 메인 컴포넌트
3. `ComponentName.module.scss` 스타일
4. `index.ts` export

### 페이지 생성
1. `src/pages/PageName/` 폴더 생성
2. `PageName.tsx` 파일 생성
3. 라우터에 등록

### 훅 생성
1. `src/domains/{domain}/hooks/` 위치
2. `use{HookName}.ts` 네이밍
3. 도메인별 분리 유지