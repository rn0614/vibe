---
description: Bootstrap 기반 UI 컴포넌트 및 Atomic Design
alwaysApply: false
---
# UI Components Rules

## 필수 체크리스트

1. **스키마 확인**: 데이터 표시 컴포넌트는 `front/src/shared/types/database.ts` 타입 사용
2. **Atomic Design**: atoms → molecules → organisms → templates 계층 준수
3. **Bootstrap 통합**: React Bootstrap과 커스텀 컴포넌트 조합
4. **접근성**: 의미적 HTML, aria 속성, 키보드 네비게이션

## 강제 패턴

### 스키마 기반 Props
```typescript
import type { Tables } from '@/shared/types/database';

interface TodoCardProps {
  todo: Tables<'tb_todolist'>; // 실제 스키마 사용
}

// ❌ 추측 기반 Props 금지
interface TodoCardProps {
  todo: { id: number; text: string; } // 스키마와 다를 수 있음
}
```

### Atomic Design 구조
```
src/components/
├── atoms/          # Button, Input, Logo (기본 단위)
├── molecules/      # AuthActions, ThemeToggle (기능 단위)
├── organisms/      # AppHeader, AppSidebar (섹션 단위)
└── templates/      # MainLayout (페이지 구조)
```

### 컴포넌트 파일 구조
```
ComponentName/
├── ComponentName.tsx
├── ComponentName.module.scss
└── index.ts
```

### 컴포넌트 템플릿
```typescript
import type { ReactNode } from "react";
import styles from "./ComponentName.module.scss";

export interface ComponentNameProps {
  children?: ReactNode;
  variant?: "primary" | "secondary";
  size?: "sm" | "md" | "lg";
  disabled?: boolean;
  className?: string;
  onClick?: () => void;
}

export const ComponentName: React.FC<ComponentNameProps> = ({
  children,
  variant = "primary",
  size = "md",
  disabled = false,
  className = "",
  onClick,
  ...props
}) => {
  const componentClass = [
    styles.component,
    styles[variant],
    styles[size],
    disabled && styles.disabled,
    className,
  ].filter(Boolean).join(" ");

  return (
    <div className={componentClass} onClick={onClick} {...props}>
      {children}
    </div>
  );
};
```

## Bootstrap 통합

### React Bootstrap 조합
```typescript
import { Dropdown } from 'react-bootstrap';
import { IconButton } from '@/atoms/IconButton';

export const UserDropdown: React.FC<Props> = ({ userEmail, onSignOut }) => (
  <Dropdown drop="down" align="end">
    <Dropdown.Toggle as={IconButton} icon="👤" />
    <Dropdown.Menu>
      <Dropdown.ItemText>{userEmail}</Dropdown.ItemText>
      <Dropdown.Divider />
      <Dropdown.Item onClick={onSignOut}>로그아웃</Dropdown.Item>
    </Dropdown.Menu>
  </Dropdown>
);
```

### Bootstrap + 커스텀 스타일
```typescript
<Navbar 
  bg="body-tertiary" 
  className={`border-bottom sticky-top ${styles.appHeader}`}
>
  <Container fluid>
    <div className="d-flex align-items-center">
      <ThemeToggle className="me-2" />
    </div>
  </Container>
</Navbar>
```

## Props 설계

### 공통 Props 패턴
```typescript
// 기본
export interface BaseComponentProps {
  children?: ReactNode;
  className?: string;
  id?: string;
}

// 상호작용
export interface InteractiveProps extends BaseComponentProps {
  disabled?: boolean;
  loading?: boolean;
  onClick?: () => void;
}

// 변형 지원
export interface VariantProps {
  variant?: "primary" | "secondary" | "outline" | "ghost" | "danger";
  size?: "sm" | "md" | "lg";
}
```

### Props 네이밍 규칙
```typescript
// ✅ 권장
isLoading      // boolean은 is/has/can 접두사
onSubmit       // 이벤트 핸들러는 on 접두사  
startIcon      // 명확한 위치 표시
variant        // 변형 타입
size           // 크기 타입

// ❌ 금지
loading        // is 접두사 없음
submit         // on 접두사 없음
leftIcon       // start/end가 더 명확
type           // 너무 일반적
```

## 스타일링

### CSS Module 클래스 네이밍
```scss
.component {        // 기본 클래스
  @include button-base;
  
  &:focus-visible {
    outline: 2px solid var(--color-primary);
  }
}

// Variants
.primary { background: var(--color-primary); }
.secondary { background: var(--color-gray-600); }

// Sizes  
.sm { padding: var(--spacing-2) var(--spacing-3); }
.md { padding: var(--spacing-3) var(--spacing-4); }

// Modifiers
.fullWidth { width: 100%; }
.disabled { opacity: 0.6; }
```

### SCSS 믹스인 활용
```scss
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: var(--border-radius);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: all 0.2s ease;
}
```

## 접근성

### 기본 접근성 규칙
```typescript
// 의미적 HTML
<button type="button" aria-label="닫기" onClick={onClose}>×</button>

// role과 aria 속성
<div 
  role="button" 
  tabIndex={0}
  aria-pressed={isPressed}
  onKeyDown={handleKeyDown}
  onClick={onClick}
>
  토글 버튼
</div>

// 에러 메시지 연결
<input aria-describedby={error ? `${id}-error` : undefined} />
{error && <div id={`${id}-error`} role="alert">{error}</div>}
```

### 키보드 네비게이션
```typescript
const handleKeyDown = (e: KeyboardEvent) => {
  switch (e.key) {
    case 'Enter':
    case ' ':
      e.preventDefault();
      onClick?.();
      break;
    case 'Escape':
      onClose?.();
      break;
  }
};
```

## 금지사항

- 추측 기반 Props 정의 (스키마 타입 대신)
- Atomic Design 계층 위반 (organism에서 template import 등)
- Bootstrap 없이 기본 UI 재구현
- 접근성 속성 누락 (aria-label, role 등)
- 하드코딩된 스타일 값 (CSS 변수 대신)

## 성능 최적화

### React.memo 사용
```typescript
// ✅ 복잡한 렌더링 컴포넌트만
export const ExpensiveComponent = React.memo<Props>(({ data }) => {
  // 복잡한 렌더링 로직
  return <div>{/* ... */}</div>;
});

// ❌ 단순한 컴포넌트 memo 금지
const SimpleButton = React.memo(({ children }) => <button>{children}</button>);
```

### 이벤트 핸들러 메모이제이션
```typescript
const MyComponent: React.FC<Props> = ({ items, onItemSelect }) => {
  const handleItemClick = useCallback((id: string) => {
    onItemSelect(id);
  }, [onItemSelect]);

  return (
    <div>
      {items.map(item => (
        <Item key={item.id} data={item} onClick={handleItemClick} />
      ))}
    </div>
  );
};
```

## Export 구조

### 컴포넌트 라이브러리
```typescript
// src/components/index.ts

// Atoms
export { Button } from './atoms/Button';
export { Input } from './atoms/Input';

// Molecules
export { ThemeToggle } from './molecules/ThemeToggle';
export { UserDropdown } from './molecules/UserDropdown';

// Organisms
export { AppHeader } from './organisms/AppHeader';

// Templates
export { MainLayout } from './templates/MainLayout';

// Types
export type { ButtonProps } from './atoms/Button';
```

## 체크리스트

1. 스키마 타입 기반 Props 정의
2. Atomic Design 계층 구조 준수
3. Bootstrap과 커스텀 스타일 조합
4. 접근성 속성 및 키보드 네비게이션
5. CSS 변수 사용 및 반응형 지원