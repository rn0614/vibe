---
description: Playwright E2E 테스트 전략 및 패턴
alwaysApply: false
---
# Testing Rules

## 필수 체크리스트

1. **Page Object Model**: 모든 테스트에서 POM 패턴 사용
2. **API 모킹**: 외부 API 의존성 모킹 필수
3. **테스트 격리**: 각 테스트 간 독립성 보장
4. **접근성 테스트**: 키보드 네비게이션, 레이블 확인

## 강제 패턴

### 파일 구조
```
tests/
├── setup/pages/          # Page Object Model 클래스
├── fixtures/            # Mock 데이터
├── examples/           # 기본 예제
└── widgets/            # 컴포넌트별 테스트
```

### 네이밍 규칙
```typescript
// ✅ 필수
component-name.spec.ts     // 컴포넌트 테스트
feature-name.spec.ts       // 기능 테스트
page-name.e2e.spec.ts     // E2E 테스트

// ❌ 금지
componentTest.ts          // .spec.ts 없음
Component.test.tsx        // 혼동 가능
```

### Playwright 설정
```typescript
export default defineConfig({
  testDir: './tests',
  fullyParallel: true,
  retries: process.env.CI ? 2 : 0,
  
  use: {
    baseURL: 'http://localhost:5174',
    trace: 'on-first-retry',
  },
  
  webServer: {
    command: 'npm run dev',
    url: 'http://localhost:5174',
    reuseExistingServer: !process.env.CI,
  },
});
```

## Page Object Model

### Base Page
```typescript
export abstract class BasePage {
  readonly page: Page;

  constructor(page: Page) {
    this.page = page;
  }

  abstract goto(): Promise<void>;
  
  async waitForPageLoad(): Promise<void> {
    await this.page.waitForLoadState('networkidle');
  }
}
```

### 컴포넌트 Page Object
```typescript
export class AppHeaderPage extends BasePage {
  readonly header = this.page.locator('nav.navbar');
  readonly loginButton = this.page.locator('text=로그인');

  async goto(): Promise<void> {
    await this.page.goto('/');
    await this.waitForPageLoad();
  }

  async expectHeaderToBeVisible(): Promise<void> {
    await expect(this.header).toBeVisible();
  }

  async clickLogin(): Promise<void> {
    await this.loginButton.click();
  }
}
```

## 테스트 유틸리티

### 공통 함수
```typescript
export function getByTestId(page: Page, testId: string): Locator {
  return page.locator(`[data-testid="${testId}"]`);
}

export async function waitForApiResponse(page: Page, urlPattern: string) {
  return page.waitForResponse(response => 
    response.url().includes(urlPattern) && response.status() === 200
  );
}

export async function mockApiError(page: Page, endpoint: string, status = 500) {
  await page.route(`**/${endpoint}`, route => {
    route.fulfill({ status, body: JSON.stringify({ error: 'Server Error' }) });
  });
}
```

## 테스트 작성 패턴

### 기본 구조
```typescript
test.describe('컴포넌트 테스트', () => {
  let headerPage: AppHeaderPage;

  test.beforeEach(async ({ page }) => {
    headerPage = new AppHeaderPage(page);
    await mockAuthApi(page);
    await headerPage.goto();
  });

  test('기본 기능 동작', async () => {
    // Given
    await headerPage.expectHeaderToBeVisible();
    
    // When
    await headerPage.clickLogin();
    
    // Then
    await expect(headerPage.page).toHaveURL('/login');
  });
});
```

### 반응형 테스트
```typescript
const viewports = [
  { name: 'mobile', width: 375, height: 667 },
  { name: 'desktop', width: 1280, height: 720 },
];

viewports.forEach(({ name, width, height }) => {
  test(`${name}에서 올바르게 표시`, async ({ page }) => {
    await page.setViewportSize({ width, height });
    await headerPage.goto();
    await headerPage.expectHeaderToBeVisible();
  });
});
```

### 접근성 테스트
```typescript
test('키보드 네비게이션', async ({ page }) => {
  await headerPage.goto();
  await page.keyboard.press('Tab');
  await page.keyboard.press('Enter');
  
  const focusedElement = await page.locator(':focus');
  await expect(focusedElement).toBeVisible();
});
```

## Mock 데이터

### API 모킹
```typescript
export async function mockAuthApi(page: Page) {
  await page.route('**/auth/me', route => {
    route.fulfill({
      status: 200,
      body: JSON.stringify({
        id: '1',
        email: 'test@example.com',
        name: '테스트 사용자'
      })
    });
  });
}
```

### 픽스처 데이터
```json
// tests/fixtures/users.json
{
  "validUser": {
    "email": "test@example.com",
    "password": "password123"
  }
}
```

## 금지사항

- Page Object Model 없이 직접 locator 사용
- 실제 API 호출 (모킹 필수)
- 하드코딩된 대기 시간 (`page.waitForTimeout`)
- 테스트 간 데이터 공유
- CI에서 `.only()` 사용

## 테스트 격리

### 데이터 정리
```typescript
test.beforeEach(async ({ page }) => {
  await page.evaluate(() => {
    localStorage.clear();
    sessionStorage.clear();
  });
});

test.afterEach(async ({ page }) => {
  await page.context().clearCookies();
});
```

## 디버깅

### 유용한 도구
```typescript
// 브라우저 일시정지
await page.pause();

// 스크린샷 저장
await page.screenshot({ path: 'debug.png' });

// 콘솔 로그 확인
page.on('console', msg => console.log('PAGE LOG:', msg.text()));

// 네트워크 대기
await page.waitForLoadState('networkidle');
```

## 실행 명령어

```bash
npm run test:e2e              # 모든 테스트
npm run test:e2e:ui           # GUI 모드
npm run test:e2e:debug        # 디버그 모드
```

## 체크리스트

1. Page Object Model 구현
2. API 모킹 설정
3. 테스트 격리 확인
4. 접근성 테스트 포함
5. 반응형 테스트 추가