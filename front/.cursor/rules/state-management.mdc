---
description: TanStack Query, Zustand 상태 관리 패턴
alwaysApply: false
---
# State Management Rules

## 필수 체크리스트

1. **스키마 확인**: `front/src/shared/types/database.ts` 타입 사용
2. **Soft Delete**: 모든 조회에 `deleted_at IS NULL` 필터
3. **Query Keys**: 표준화된 키 구조 사용
4. **상태 분리**: 서버 상태(TanStack Query) vs 클라이언트 상태(React State)

## 강제 패턴

### 스키마 기반 타입
```typescript
import type { Tables, TablesInsert, TablesUpdate } from '@/shared/types/database';
type TodoItem = Tables<'tb_todolist'>;
type CreateTodo = TablesInsert<'tb_todolist'>;
```

### Soft Delete 쿼리
```typescript
// ✅ 모든 조회에 필수
const todosQuery = createSupabaseQuery('tb_todolist')
  .select('*')
  .where('deleted_at', 'is', null);

// ✅ Soft Delete 실행
updateTodo.mutate({
  id: todoId,
  data: { 
    deleted_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }
});
```

### TanStack Query 설정
```typescript
const createQueryClient = () => new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,
      gcTime: 10 * 60 * 1000,
      retry: 1,
      refetchOnWindowFocus: false,
    },
    mutations: {
      retry: false,
    },
  },
});
```

### 뮤테이션 패턴
```typescript
const createTodo = useSupabaseMutationBuilder('tb_todolist', 'insert', {
  invalidateQueries: ['tb_todolist'],
  onSuccess: (data) => console.log('Success:', data),
  onError: (error) => console.error('Error:', error)
});

// 사용
createTodo.mutate({ 
  data: { title: 'New Todo', user_id: userId } 
});
```

### 커스텀 훅 네이밍
```typescript
// ✅ 권장
use{Domain}{Action}    // useAuthSignIn
use{Domain}{Entity}    // useAuthUser
use{Domain}{State}     // useThemeState

// ❌ 금지
useAuth               // 모호함
useGetUser            // 불필요한 Get
```

## Query Key 구조

### 표준 키 생성
```typescript
export const createQueryKeys = (entity: string) => ({
  all: () => [entity] as const,
  lists: () => [...createQueryKeys(entity).all(), 'list'] as const,
  list: (filters: Record<string, unknown>) => 
    [...createQueryKeys(entity).lists(), filters] as const,
  detail: (id: string) => [...createQueryKeys(entity).all(), 'detail', id] as const,
});

export const QUERY_KEYS = {
  todos: createQueryKeys('todos'),
  users: createQueryKeys('users'),
};
```

## 상태 분리 원칙

### 서버 상태 (TanStack Query)
```typescript
// 서버에서 가져오는 데이터
const { data: user } = useAuth();
const { data: todos } = useSupabaseQueryBuilder(todosQuery);
```

### 클라이언트 상태 (React State)
```typescript
// 클라이언트 전용 상태
const [isModalOpen, setIsModalOpen] = useState(false);
const [searchTerm, setSearchTerm] = useState('');
const { theme, setTheme } = useTheme();
```

### Zustand (글로벌 클라이언트 상태)
```typescript
const useUIStore = create<UIState>((set) => ({
  isLoadingGlobal: false,
  modalStack: [],
  setGlobalLoading: (isLoading) => set({ isLoadingGlobal: isLoading }),
}));
```

## 금지사항

- `interface` 직접 정의 (스키마 타입 대신)
- `deleted_at` 필터 누락
- Hard Delete (`deleteTodo.mutate`)
- 비표준 Query Key 구조
- 서버 상태를 React State로 관리
- 클라이언트 상태를 TanStack Query로 관리

## 도메인별 훅 구조

### 기본 훅
```typescript
// src/domains/auth/hooks/useAuth.ts
export const useAuth = () => {
  const userQuery = useQuery({
    queryKey: ['auth', 'user'],
    queryFn: getCurrentUser,
    staleTime: 5 * 60 * 1000,
  });

  return {
    user: userQuery.data ?? null,
    isLoading: userQuery.isLoading,
    isAuthenticated: !!userQuery.data,
  };
};
```

### 액션 분리
```typescript
// src/domains/auth/hooks/useAuthActions.ts
export const useAuthActions = () => {
  const navigate = useNavigate();
  const auth = useAuth();

  const signOutWithRedirect = async (redirectTo = "/") => {
    await auth.signOut();
    navigate(redirectTo, { replace: true });
  };

  return { ...auth, signOutWithRedirect };
};
```

## 체크리스트

1. 스키마 타입 사용 확인
2. Soft Delete 필터 적용
3. Query Key 표준 구조 사용
4. 상태 분리 원칙 준수
5. 에러 처리 및 로딩 상태 관리