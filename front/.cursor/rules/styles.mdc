---
globs: ["**/*.scss", "**/*.css", "**/*.ts","**/*.tsx"]
alwaysApply: false
---

# Vibe 프로젝트 스타일 가이드

> React Bootstrap 기반 다크모드 지원 FSD 아키텍처 스타일링 가이드

## 🏗️ 프로젝트 스타일링 구조

### 스타일링 우선순위
1. **React Bootstrap 컴포넌트** (1순위)
2. **Bootstrap 유틸리티 클래스** (2순위) 
3. **SCSS Module** (특별한 경우만)

```typescript
// ✅ 권장하는 스타일링 방법
import { Container, Row, Col, Card, Button } from 'react-bootstrap';

const Component = () => (
  <Container className="py-5">
    <Row>
      <Col lg={8}>
        <Card className="shadow-sm border-0">
          <Card.Body className="p-4">
            <Button variant="primary" size="lg">
              액션 버튼
            </Button>
          </Card.Body>
        </Card>
      </Col>
    </Row>
  </Container>
);
```

## 🎨 다크모드 호환 색상 시스템

### 필수 색상 클래스 (다크모드 자동 대응)

```typescript
// ✅ 텍스트 색상
className="text-body"           // 기본 텍스트
className="text-body-secondary" // 보조 텍스트 (기존 text-muted 대체)
className="text-primary"        // 브랜드 색상

// ✅ 배경 색상  
className="bg-body"             // 페이지 배경 (기존 bg-white 대체)
className="bg-body-secondary"   // 패널 배경 (기존 bg-light 대체) 
className="bg-body-tertiary"    // 헤더/사이드바 배경

// ❌ 피해야 할 고정 색상
className="text-dark"   // → text-body 사용
className="text-muted"  // → text-body-secondary 사용
className="bg-white"    // → bg-body 사용
className="bg-light"    // → bg-body-secondary 사용
```

### 실제 프로젝트 사용 예시

```typescript
// HomePage.tsx 패턴
<Container className="py-5">
  <Card className="border-0 shadow-sm">
    <Card.Body className="p-4">
      <Card.Text className="text-body-secondary">
        설명 텍스트
      </Card.Text>
    </Card.Body>
  </Card>
</Container>

// TodoPage.tsx 패턴  
<Card className="bg-body-secondary border-0">
  <Card.Body className="py-3">
    <small className="text-body-secondary">
      필터 옵션
    </small>
  </Card.Body>
</Card>
```

## 🧩 React Bootstrap 컴포넌트 사용법

### 프로젝트에서 사용 중인 컴포넌트들

#### **레이아웃 컴포넌트**
```typescript
import { Container, Row, Col } from 'react-bootstrap';

// ✅ 표준 레이아웃 패턴
<Container className="py-5">
  <Row className="justify-content-center">
    <Col xs={12} md={8} lg={6}>
      {/* 콘텐츠 */}
    </Col>
  </Row>
</Container>
```

#### **네비게이션 컴포넌트**
```typescript
import { Navbar, Nav, Offcanvas } from 'react-bootstrap';

// AppLayout.tsx에서 사용하는 패턴
<Navbar bg="body-tertiary" expand="lg" className="border-bottom sticky-top">
  <Navbar.Brand as={Link} to="/" className="fw-bold text-primary">
    Vibe
  </Navbar.Brand>
</Navbar>

<Offcanvas show={show} onHide={() => setShow(false)} className="bg-body">
  <Nav className="flex-column">
    <Nav.Link as={Link} to="/" className="text-body">
      홈
    </Nav.Link>
  </Nav>
</Offcanvas>
```

#### **폼 컴포넌트**
```typescript
import { Form, Button, InputGroup } from 'react-bootstrap';

// TodoPage.tsx에서 사용하는 패턴
<Form onSubmit={handleSubmit}>
  <InputGroup>
    <Form.Control
      type="text"
      placeholder="검색어 입력"
      value={searchTerm}
      onChange={(e) => setSearchTerm(e.target.value)}
    />
    <Button variant="outline-secondary" type="submit">
      🔍
    </Button>
  </InputGroup>
</Form>
```

#### **테이블 및 데이터 표시**
```typescript
import { Table, Badge, Pagination } from 'react-bootstrap';

// TodoPage.tsx 테이블 패턴
<Table responsive hover className="mb-0">
  <thead className="table-light">
    <tr>
      <th>ID</th>
      <th>생성일</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <Badge bg="secondary" pill>#{id}</Badge>
      </td>
      <td>
        <div className="fw-medium">날짜</div>
        <small className="text-body-secondary">상대시간</small>
      </td>
    </tr>
  </tbody>
</Table>
```

#### **알림 및 상태 표시**
```typescript
import { Alert, Spinner, Accordion } from 'react-bootstrap';

// 오류 상태 표시
<Alert variant="danger" className="text-center">
  <Alert.Heading>🚨 오류가 발생했습니다</Alert.Heading>
  <p>메시지</p>
</Alert>

// 로딩 상태
<Spinner size="sm" className="me-2" />

// 상세 정보 접기/펼치기
<Accordion>
  <Accordion.Item eventKey="0">
    <Accordion.Header>오류 세부사항</Accordion.Header>
    <Accordion.Body>세부 내용</Accordion.Body>
  </Accordion.Item>
</Accordion>
```

## 🌓 다크모드 구현 패턴

### useTheme 훅 사용법

```typescript
import { useTheme } from '@/shared/hooks';

const Component = () => {
  const { theme, effectiveTheme, toggleTheme, setTheme } = useTheme();
  
  return (
    <div className="bg-body text-body">
      {/* 테마 토글 버튼 */}
      <Button 
        variant="outline-secondary"
        onClick={toggleTheme}
        title={`현재 테마: ${effectiveTheme}`}
      >
        {effectiveTheme === 'dark' ? '🌙' : '☀️'}
      </Button>
      
      {/* 테마 선택 드롭다운 */}
      <Dropdown>
        <Dropdown.Header>테마 설정</Dropdown.Header>
        <Dropdown.Item 
          onClick={() => setTheme('light')}
          className={theme === 'light' ? 'fw-bold' : ''}
        >
          ☀️ 라이트 모드
        </Dropdown.Item>
        <Dropdown.Item 
          onClick={() => setTheme('dark')}
          className={theme === 'dark' ? 'fw-bold' : ''}
        >
          🌙 다크 모드
        </Dropdown.Item>
        <Dropdown.Item 
          onClick={() => setTheme('auto')}
          className={theme === 'auto' ? 'fw-bold' : ''}
        >
          🔄 시스템 설정
        </Dropdown.Item>
      </Dropdown>
    </div>
  );
};
```

### 테마 적용 체크리스트

#### ✅ 반드시 확인할 것들
- [ ] `text-body` 또는 `text-body-secondary` 사용했는가?
- [ ] `bg-body`, `bg-body-secondary`, `bg-body-tertiary` 사용했는가?
- [ ] 하드코딩된 색상(#ffffff, #000000) 사용하지 않았는가?
- [ ] 라이트/다크 모드 모두에서 가독성 확인했는가?

#### ❌ 피해야 할 패턴들
```typescript
// 하드코딩된 색상
style={{ color: '#000', backgroundColor: '#fff' }} 

// 고정된 색상 클래스
className="text-dark bg-white"

// 조건부 테마 스타일링 (Bootstrap이 자동 처리)
className={theme === 'dark' ? 'text-white' : 'text-dark'}
```

## 🏛️ FSD 아키텍처 스타일링 패턴

### 계층별 스타일링 방법

#### **Pages (pages/)**
```typescript
// 전체 페이지 레이아웃
export const HomePage = () => (
  <Container className="py-5">
    <Row className="justify-content-center">
      <Col lg={10}>
        {/* 페이지 콘텐츠 */}
      </Col>
    </Row>
  </Container>
);
```

#### **Widgets (widgets/)**
```typescript
// AppLayout.tsx - 전체 앱 레이아웃
export const AppLayout = ({ children }) => (
  <div className="d-flex flex-column min-vh-100 bg-body">
    <Navbar bg="body-tertiary" className="border-bottom sticky-top">
      {/* 헤더 */}
    </Navbar>
    <main className="flex-grow-1 p-4">
      {children}
    </main>
  </div>
);
```

#### **Features (features/)**
```typescript
// AuthUI - CSS Module 사용 예외 케이스
import styles from './AuthUI.module.scss';

export const AuthUI = () => (
  <div> {/* Card 스타일링 제거, 부모에서 처리 */}
    <Auth
      appearance={{
        className: {
          button: styles.authButton,
          input: styles.authInput,
        }
      }}
    />
  </div>
);
```

#### **Shared (shared/)**
```typescript
// shared/ui 컴포넌트는 Bootstrap 컴포넌트 래핑
export { Button, Card, Container } from 'react-bootstrap';
```

## 📱 반응형 디자인 패턴

### Bootstrap 그리드 활용

```typescript
// 모바일 퍼스트 반응형
<Row>
  <Col xs={12} sm={8} md={6} lg={4}>
    <Card className="h-100">
      {/* 카드 콘텐츠 */}
    </Card>
  </Col>
</Row>

// 데스크톱 사이드바 패턴 (AppLayout.tsx)
<div className="d-none d-lg-block border-end bg-body" 
     style={{ width: '240px', flexShrink: 0 }}>
  {/* 데스크톱 사이드바 */}
</div>

// 모바일 Offcanvas 패턴
<Offcanvas show={showSidebar} onHide={() => setShowSidebar(false)}>
  {/* 모바일 사이드바 */}
</Offcanvas>
```

### 자주 사용하는 유틸리티 클래스

```typescript
// 간격
className="py-5"        // 위아래 패딩
className="mb-4"        // 아래 마진
className="gap-3"       // Flexbox gap

// 레이아웃
className="d-flex"                    // Flexbox
className="justify-content-center"   // 중앙 정렬
className="align-items-center"       // 수직 중앙
className="text-center"              // 텍스트 중앙

// 반응형 표시/숨김
className="d-none d-lg-block"        // 데스크톱에서만 표시
className="d-block d-lg-none"        // 모바일에서만 표시

// 크기 및 형태
className="w-100"       // 전체 너비
className="h-100"       // 전체 높이
className="min-vh-100"  // 최소 뷰포트 높이
className="rounded"     // 둥근 모서리
className="shadow-sm"   // 그림자
```

## 🔧 실무 스타일링 팁

### 컴포넌트 작성 시 체크리스트

1. **Import 순서**
   ```typescript
   // 1. React 관련
   import { useState } from 'react';
   
   // 2. Bootstrap 컴포넌트
   import { Container, Row, Col } from 'react-bootstrap';
   
   // 3. 라우팅
   import { Link } from 'react-router-dom';
   
   // 4. 커스텀 훅
   import { useTheme, useAuth } from '@/shared/hooks';
   ```

2. **className 작성 순서**
   ```typescript
   // 레이아웃 → 색상 → 상태 → 유틸리티
   className="d-flex justify-content-center bg-body text-body py-5 shadow-sm"
   ```

3. **접근성 고려**
   ```typescript
   // 버튼에 title 속성
   <Button title="테마 전환">🌙</Button>
   
   // 테이블 헤더
   <Table>
     <thead>
       <tr>
         <th scope="col">제목</th>
       </tr>
     </thead>
   </Table>
   ```

### 성능 최적화

```typescript
// ✅ 필요한 컴포넌트만 import
import { Container, Row, Col } from 'react-bootstrap';

// ❌ 전체 import 금지
import * as Bootstrap from 'react-bootstrap';

// ✅ 조건부 클래스는 클래스명 정리
const buttonClass = `btn btn-${variant} ${size ? `btn-${size}` : ''} ${className || ''}`.trim();
```

이 가이드를 통해 Vibe 프로젝트의 일관된 스타일링을 유지하며 효율적으로 개발할 수 있습니다.