---
description: 성능 최적화 및 번들 관리
alwaysApply: false
---
# Performance Rules

## 필수 체크리스트

1. **메모이제이션**: 복잡한 계산만 `useMemo`, 함수 전달시 `useCallback`
2. **코드 스플리팅**: 라우트별 `lazy` 적용
3. **이미지 최적화**: `loading="lazy"` 필수
4. **이벤트 정리**: `useEffect` cleanup 함수 필수

## 강제 패턴

### 메모이제이션 규칙
```typescript
// ✅ 복잡한 계산만 메모이제이션
const sortedTodos = useMemo(() => {
  return todos.sort((a, b) => a.title.localeCompare(b.title));
}, [todos]);

// ✅ 자식에 전달되는 함수만 useCallback
const handleClick = useCallback(() => {
  setCount(c => c + 1);
}, []);

// ❌ 단순한 컴포넌트 React.memo 금지
const SimpleButton = ({ children, onClick }) => (
  <button onClick={onClick}>{children}</button>
);
```

### 코드 스플리팅
```typescript
const HomePage = lazy(() => import('@/pages/HomePage/HomePage'));

<Suspense fallback={<div>로딩 중...</div>}>
  <Routes>
    <Route path="/" element={<HomePage />} />
  </Routes>
</Suspense>
```

### 이미지 최적화
```typescript
<img
  src={src}
  alt={alt}
  loading="lazy"
  decoding="async"
/>
```

### TanStack Query 캐시 설정
```typescript
const useTodos = () => {
  return useQuery({
    queryKey: ['todos'],
    queryFn: fetchTodos,
    staleTime: 5 * 60 * 1000,
    gcTime: 10 * 60 * 1000,
    refetchOnWindowFocus: false,
  });
};
```

### 이벤트 리스너 정리
```typescript
useEffect(() => {
  const handleResize = () => { /* ... */ };
  window.addEventListener('resize', handleResize);
  
  return () => {
    window.removeEventListener('resize', handleResize);
  };
}, []);
```

## Vite 빌드 설정

### 번들 분할
```typescript
// vite.config.ts
export default defineConfig({
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          ui: ['react-bootstrap'],
          query: ['@tanstack/react-query'],
          supabase: ['@supabase/supabase-js'],
        },
      },
    },
    chunkSizeWarningLimit: 1000,
  },
});
```

## 금지사항

- 단순 컴포넌트에 `React.memo` 사용
- 모든 함수에 `useCallback` 적용
- 간단한 계산에 `useMemo` 사용
- CSS `transition: all` 사용
- 전체 라이브러리 import (`import *`)
- `useEffect` cleanup 함수 누락

## CSS 최적화

```scss
// ✅ 효율적인 선택자
.todo-item { display: flex; }

// ❌ 깊은 중첩 금지
.page .content .section .article .todo-item { }

// ✅ 단일 속성 트랜지션
.card { transition: transform 0.2s ease; }

// ❌ 모든 속성 트랜지션 금지
.card { transition: all 0.2s ease; }
```

## Import 최적화

```typescript
// ✅ 명시적 import
import { debounce } from 'lodash';
import { format } from 'date-fns';

// ❌ 전체 라이브러리 import 금지
import _ from 'lodash';
import * as dateFns from 'date-fns';
```

## 체크리스트

1. 컴포넌트 re-render 최소화
2. 번들 크기 1MB 이하 유지
3. Core Web Vitals 기준 충족
4. 메모리 누수 방지 (cleanup 함수)
5. 이미지 lazy loading 적용